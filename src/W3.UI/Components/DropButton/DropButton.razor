@namespace W3.UI.Components
@using WebAssembly
@implements IDisposable

<div class="dropdown" @onmouseover="@MouseOver">
    <button class="btn dropbtn" @onclick="@ToggleDropMenu">
        @Text
        <i class="fa fa-caret-down"></i>
    </button>
    @if (isOpen)
    {
    <div class="@(Direction == Direction.Down ? "dropdown-content" : "dropup-content")" id="myDropdown" @onclick="@ItemClicked">
        @ChildContent
    </div>
    }
</div>

@code {
    bool isOpen = false;
    JSObject window;

    [Parameter]
    private string Text { get; set; }

    [Parameter]
    private Direction Direction { get; set; } = Direction.Down;

    [Parameter]
    private DropTrigger Trigger { get; set; } = DropTrigger.Click;

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    protected override async Task OnInitAsync()
    {
        window = (JSObject)WebAssembly.Runtime.GetGlobalObject("window");
        window.Invoke("addEventListener", "click", (Action<JSObject>)OnWindowClick);
        await base.OnInitAsync();
    }

    private void OnWindowClick(JSObject ev) 
    {
        var document = (JSObject)WebAssembly.Runtime.GetGlobalObject("document");
        var target = (JSObject)ev.GetObjectProperty("target");
        if(isOpen) 
        {
            if(!(bool)target.Invoke("matches", ".dropbtn")) 
            {
                isOpen = false;
                StateHasChanged();
            }
        }
    }

    public void Dispose() 
    {
        window.Invoke("removeEventListener", "click", (Action<JSObject>)OnWindowClick);
        window.Dispose();
    }

    private void ToggleDropMenu(UIMouseEventArgs eventArgs)
    {
        if(Trigger == DropTrigger.Click) 
        {
            isOpen = !isOpen;
        }
    }

    private void ItemClicked(UIMouseEventArgs eventArgs)
    {
        isOpen = false;
    }

    private void MouseOver(UIMouseEventArgs eventArgs)
    {
        if(Trigger == DropTrigger.Hover) 
        {
            isOpen = true;
        }
    }

    private void MouseOut(UIMouseEventArgs eventArgs)
    {
        if(Trigger == DropTrigger.Hover) 
        {
            isOpen = false;
        }
    }
}
