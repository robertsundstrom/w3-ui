@namespace W3.UI.Components

@using W3.UI.Components.UIInterfaces
@using System.Timers
@implements IDisposable

<!-- Slideshow container -->
<div class="slideshow-container">

    <CascadingValue Value=this>

        @ChildContent

    </CascadingValue>

    @ActiveSlide?.ChildContent

    <!-- Next and previous buttons -->
    <a class="prev" @onclick="@PreviousSlide">&#10094;</a>
    <a class="next" @onclick="@NextSlide">&#10095;</a>
</div>

<br>

<!-- The dots/circles -->
<div style="text-align:center">
    @foreach (var i in Enumerable.Range(0, Slides.Count))
    {
        string SlideCssClass = ActiveSlide == Slides[i] ? "active" : null;
        <span class="dot @SlideCssClass" @onclick="@(() => SetActiveSlide(i))"></span>
    }
</div>

@code {
    private List<ISlide> Slides { get; } = new List<ISlide>();
    private bool isAutomatic;
    private Timer timer;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool IsAutomatic
    {
        get
        {
            return isAutomatic;
        }
        set
        {
            isAutomatic = value;
            if (isAutomatic)
            {
                if (timer == null)
                {
                    timer = new Timer();
                    timer.Interval = ChangeTime.TotalMilliseconds;
                    timer.Elapsed += OnTimerElapsed;
                    timer.Start();
                }
            }
            else
            {
                if (timer != null)
                {
                    timer.Stop();
                    timer.Elapsed -= OnTimerElapsed;
                    timer = null;
                }
            }
        }
    }

    void OnTimerElapsed(object sender, EventArgs args)
    {
        NextSlide();
    }

    [Parameter]
    public TimeSpan ChangeTime { get; set; } = TimeSpan.FromSeconds(5);

    private void PreviousSlide()
    {
        var currentIndex = Slides.IndexOf(ActiveSlide);
        var newIndex = currentIndex - 1;
        if (currentIndex == 0)
        {
            newIndex = Slides.Count - 1;
        }
        SetActiveSlide(newIndex);
    }

    private void NextSlide()
    {
        var currentIndex = Slides.IndexOf(ActiveSlide);
        var newIndex = currentIndex + 1;
        if (newIndex == Slides.Count)
        {
            newIndex = 0;
        }
        SetActiveSlide(newIndex);
    }

    public ISlide ActiveSlide { get; private set; }

    public void AddSlide(ISlide slide)
    {
        Slides.Add(slide);
        if (ActiveSlide == null)
        {
            SetActiveSlide(slide);
        }
    }

    public void RemoveSlide(ISlide slide)
    {
        Slides.Remove(slide);
        if (ActiveSlide == slide)
        {
            SetActiveSlide(null);
        }
    }

    public void SetActiveSlide(ISlide slide)
    {
        if (ActiveSlide != slide)
        {
            ActiveSlide = slide;
            StateHasChanged();
        }
    }

    public void SetActiveSlide(int slideIndex)
    {
        SetActiveSlide(Slides[slideIndex]);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
